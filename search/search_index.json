{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IMPORTANT: This software is not yet production ready and still changing a lot. Please wait until version 1!!","text":""},{"location":"#introduction","title":"Introduction","text":"<p>DBPlus is a interface layer between the several python database interfaces and your program. It makes the SQL access from your program database-agnostic meaning the same code can run unmodified on several databases. All you need to change is the database URL. Of course if you use specific SQL that will only work on a certain database DBPlus cannot change this.</p>"},{"location":"#installation","title":"Installation","text":"<p>The latest stable release from pypi: pip install dbplus</p> <p>From github: Clone the repository using git and issue \"pip install .\"</p> <p>Please note that DBPlus requires you to install the clients and their pre-req's:</p> <ul> <li>DB2: ibm_db</li> <li>SQLite: builtin into python (no client required)</li> <li>MySQL: Mysql Connector</li> <li>Oracle: CX_Oracle</li> <li>Postgresql: psycopg2 </li> </ul> <p>Documentation : https://klaasbrant.github.io/DBPlus/ </p>"},{"location":"#example","title":"Example","text":"<pre><code>from dbplus import Database\n\n# Examples of database urls\n\n#db = Database('SQLite:///test.db')  # driver included in python\n#db = Database('Postgres://&lt;user&gt;:&lt;password&gt;@127.0.0.1:5432/dvdrental') # requires psycopg2\n#db = Database('MySQL://&lt;user&gt;:&lt;password&gt;@127.0.0.1:3306/test') # requires Mysql Connector\n#db = Database('Oracle://&lt;user&gt;:&lt;password&gt;@127.0.0.1:1521/xe') # requires CX_Oracle\n\ndb = Database('DB2://db2demo:demodb2@192.168.1.222:50000/sample') # requires ibm_db\n\n# Using named variables in query\n\nrows = db.query('select * from klaas.emp where edlevel=:edlevel and workdept=:wd',edlevel=18,wd='A00')\nprint(rows,'\\n')\nprint('rows[1]={}\\n'.format(rows[1]))\ndf=rows.as_DataFrame()\nprint('csv to stdout, check the many options with dataframes!  \\n',df.to_csv())\n\n# Full transaction support\n\nwith db.transaction():\n    # DELETE\n    num = db.execute('DELETE FROM klaas.texample')\n    print('Rows deleted from klaas.texample={} \\n'.format(num))\n    # INSERT\n    for i in range(1, 11):\n        db.execute('INSERT INTO klaas.texample VALUES (?,?)', i, i)\n    # UPDATE\n    num = db.execute('UPDATE klaas.texample SET col2 = col2+100  WHERE col1 &gt; ?', 5)\n    print ('Rows updated in klaas.texample={} \\n'.format(num))\n\n# transaction is now commited\n\nprint(db.query('select * from klaas.texample'))\n\n</code></pre> <p>Output from example above:</p> empno firstnme midinit lastname workdept phoneno hiredate job edlevel sex birthdate salary bonus comm 000010 CHRISTINE I HAAS A00 3978 1995-01-01 PRES 18 F 1963-08-24 152750.00 1000.00 4220.00 200010 DIAN J HEMMINGER A00 3978 1995-01-01 SALESREP 18 F 1973-08-14 46500.00 1000.00 4220.00 <p>rows[1]= <p>csv to stdout, check the many options with dataframes!  ,birthdate,bonus,comm,edlevel,empno,firstnme,hiredate,job,lastname,midinit,phoneno,salary,sex,workdept 0,1963-08-24,1000.00,4220.00,18,000010,CHRISTINE,1995-01-01,PRES    ,HAAS,I,3978,152750.00,F,A00 1,1973-08-14,1000.00,4220.00,18,200010,DIAN,1995-01-01,SALESREP,HEMMINGER,J,3978,46500.00,F,A00</p> <p>Rows deleted from klaas.texample=10</p> <p>Rows updated in klaas.texample=5</p> col1 col2 1 1 2 2 3 3 4 4 5 5 6 106 7 107 8 108 9 109 10 110"},{"location":"#whats-next","title":"What's next?","text":"<ul> <li>Add tests / bug fixing</li> <li>Add more documentation / examples</li> <li>more cool stuff and of course your suggestions are welcome</li> </ul>"}]}